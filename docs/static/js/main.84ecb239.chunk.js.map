{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagen","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAuB5C,OACI,sBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAUlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAxBiB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACpC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,kCAAKA,EAAL,W,uBCLCK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAAM,0CAA0CO,UAAUF,GAAU,qDAFvD,SAGKG,MAAMR,GAHX,cAGbS,EAHa,gBAIEA,EAAUC,OAJZ,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KACd,SAAAC,GAAQ,IAAD,EACH,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAX3B,kBAgBZY,GAhBY,4CAAH,sDCMPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECHX,SAAEA,GAAe,IAAD,EAEdrB,mBACtB,CACI2B,KAAM,GACNO,SAAS,IALuB,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAXAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAK,SAAAC,GACnBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGlB,CAAEb,IAIEc,EDdiBK,CAAanB,GAA9BM,EAH4B,EAG5BA,KAAMO,EAHsB,EAGtBA,QAWb,OACI,eAAC,WAAD,WACI,oBAAIjB,UAAU,oCAAd,SAAmDI,IAClDa,GAAW,yCACZ,qBAAKjB,UAAU,YAAf,SAGQU,EAAKE,KAAI,SAACY,GACN,OAAO,cAAC,EAAD,eAECA,GADCA,EAAO3B,aEEzB4B,EA7BM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,qBAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KASvB,OACI,gCACI,2CACA,cAAC,EAAD,CAAaA,cAAeA,EAAe4C,WAAYA,IACvD,uBAEA,6BAEQA,EAAWd,KAAI,SAACR,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,YChBjCuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.84ecb239.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2) {\r\n            //cats viene desde el estado anterior\r\n            setCategories( cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    AddCategory.propTypes = {\r\n        setCategories : PropTypes.func.isRequired,\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputValue}\r\n            />\r\n        </form>\r\n    )\r\n\r\n\r\n    //Comunicacion del hijo al padre\r\n    // Padre <GifExpertApp> / hijo <AddCategory>\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async(category) => {\r\n    //api.giphy.com/v1/gifs/search\r\n    const url = 'https://api.giphy.com/v1/gifs/search?q='+encodeURI(category)+'&limit=10&api_key=0yhwkjFwdkhGuL3MgGYcaPGZ5PDIoDOZ'\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n    \r\n    const gifs = data.map(\r\n        img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            } \r\n        }\r\n    )\r\n\r\n    return gifs;\r\n}","import React, { Fragment } from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n//funcional component \r\nexport const GifGrid = ({category}) => {\r\n\r\n    //desestructura el state {x, x}\r\n    const {data, loading} = useFetchGifs(category);\r\n\r\n    //const [images, setImages] = useState([]);\r\n\r\n    \r\n\r\n    GifGrid.propTypes = {\r\n        category: PropTypes.string.isRequired,\r\n    }\r\n    \r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p>Cargando</p>}\r\n            <div className=\"card-grid\">\r\n                   \r\n                {\r\n                    data.map((imagen) => {\r\n                        return <GifGridItem \r\n                            key={imagen.id} \r\n                            {...imagen}\r\n                            />\r\n                    })\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n\r\n\r\n}\r\n//","import { useState, useEffect } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n//Custom Hook\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [],\r\n            loading: true\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                data: imgs, \r\n                loading: false\r\n            });\r\n        });\r\n    }, [ category ]); \r\n    // si cambia la categoria entonces \r\n    // dispara el useEffect\r\n    \r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport {AddCategory} from \"./AddCategory\";\r\nimport { GifGrid } from './GifGrid';\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Naruto Shippuden']);\r\n    \r\n    // const handleAddCategory = () =>\r\n    // {\r\n    //     setCategories([...categories, \"Boruto\"]);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpert</h2>\r\n            <AddCategory setCategories={setCategories} categories={categories}/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map((category) => \r\n                        <GifGrid \r\n                            key={category} \r\n                            category={category}\r\n                        />\r\n                    )\r\n                }  \r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./Components/GifExpertApp\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}